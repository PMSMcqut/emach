clc
clear

DRAW_MAGNET = 1;
DRAW_TIKZ   = 0;

%% Define cross sections

arc1 = CrossSectArc( ...
        'name', 'arc1', ...
        'dim_d_a', DimMillimeter(1), ...
        'dim_r_o', DimMillimeter(10), ...        
        'dim_alpha', DimDegree(45).toRadians(), ...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([0,0]), ...
<<<<<<< HEAD
            'rotate_xy', DimDegree(0).toRadians() ...
=======
            'theta', DimDegree(0).toRadians() ...
>>>>>>> develop
        ) ...
        );
    
trap1 = CrossSectTrapezoid( ...
        'name', 'trapezoid1', ...
        'dim_h', DimMillimeter(1), ...
        'dim_w', DimMillimeter(4), ...
        'dim_theta', DimDegree(60).toRadians(), ...        
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([0,0]), ...
<<<<<<< HEAD
            'rotate_xy', DimDegree(0).toRadians() ...
=======
            'theta', DimDegree(0).toRadians() ...
>>>>>>> develop
        ) ...
        );
    
rotor1 = CrossSectInnerRotorPMRotor( ...
        'name', 'rotor', ...
        'dim_alpha_rm', DimDegree(35), ...
        'dim_alpha_rp', DimDegree(60), ...
        'dim_alpha_ms', DimDegree(10), ...
        'dim_r_ro', DimMillimeter(40), ...
        'dim_r_ri', DimMillimeter(10), ...
        'dim_d_ri', DimMillimeter(20), ...
        'dim_d_rm', DimMillimeter(10), ...
        'dim_m_r', DimMillimeter(3), ...
        'dim_l_r', DimMillimeter(5), ...
        'num_pole', 6, ...
        'num_seg', 3, ...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([0,0]), ...
            'rotate_xy', DimDegree(0).toRadians() ...
        ) ...
        );

    
    
    rotor2 = CrossSectInnerRotorPMRotor( ...
        'name', 'rotor', ...
        'dim_alpha_rm', DimDegree(30), ...
        'dim_alpha_rp', DimDegree(60), ...
        'dim_alpha_ms', DimDegree(15), ...
        'dim_r_ro', DimMillimeter(40), ...
        'dim_r_ri', DimMillimeter(10), ...
        'dim_d_ri', DimMillimeter(20), ...
        'dim_d_rm', DimMillimeter(10), ...
        'dim_m_r', DimMillimeter(3), ...
        'dim_l_r', DimMillimeter(5), ...
        'num_pole', 6, ...
        'num_seg', 3, ...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([-100,-100]), ...
            'rotate_xy', DimDegree(0).toRadians() ...
        ) ...
        );
    
    
    
        rotor3 = CrossSectInnerRotorPMRotor( ...
        'name', 'rotor', ...
        'dim_alpha_rm', DimDegree(40), ...
        'dim_alpha_rp', DimDegree(90), ...
        'dim_alpha_ms', DimDegree(15), ...
        'dim_r_ro', DimMillimeter(40), ...
        'dim_r_ri', DimMillimeter(10), ...
        'dim_d_ri', DimMillimeter(20), ...
        'dim_d_rm', DimMillimeter(10), ...
        'dim_m_r', DimMillimeter(3), ...
        'dim_l_r', DimMillimeter(5), ...
        'num_pole', 4, ...
        'num_seg', 3, ...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([-100,0]), ...
            'rotate_xy', DimDegree(0).toRadians() ...
        ) ...
        );
    
    
    rotor4 = CrossSectInnerRotorPMRotor( ...
        'name', 'rotor', ...
        'dim_alpha_rm', DimDegree(40), ...
        'dim_alpha_rp', DimDegree(180), ...
        'dim_alpha_ms', DimDegree(20), ...
        'dim_r_ro', DimMillimeter(40), ...
        'dim_r_ri', DimMillimeter(10), ...
        'dim_d_ri', DimMillimeter(20), ...
        'dim_d_rm', DimMillimeter(10), ...
        'dim_m_r', DimMillimeter(3), ...
        'dim_l_r', DimMillimeter(5), ...
        'num_pole', 4, ...
        'num_seg', 3, ...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([0,-100]), ...
            'rotate_xy', DimDegree(0).toRadians() ...
        ) ...
        );
%% Define components

cs = [rotor1,rotor2,rotor3,rotor4];

comp1 = Component( ...
        'name', 'comp1', ...
        'crossSections', cs, ...
        'material', MaterialGeneric('name', 'pm'), ...
        'makeSolid', MakeSimpleExtrude( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_depth', DimMillimeter(15)) ...
        );

%% Draw via MagNet

if (DRAW_MAGNET)
    toolMn = MagNet();
    toolMn.open(0,0,true);
    toolMn.setDefaultLengthUnit('millimeters', false);

    comp1.make(toolMn, toolMn);

    toolMn.viewAll();
end

%% Draw via TikZ

if (DRAW_TIKZ)
    toolTikz = TikZ();
    toolTikz.open('output.txt');

    comp1.make(toolTikz);

    toolTikz.close();
end
