function [ radialNames ] = mn_getPathOfRadialFaces(mn, doc, ...
                                        bodyName, minRad, maxRad)
%mn_getPathOfRadialFaces Get the path of radial faces for a component
%   bodyName - The name of the component
%   minRad - Minimum face radius to consider when searching for faces
%   maxRad - Maximum face radius to consider when searching for faces


            
    radialNames = {};
    for i = 1:1e5
        PID = invoke(doc, 'getProblem', 1);
        PathName = [bodyName ',Face#' num2str(i)];        
        bSurf = invoke(PID, 'isSurface', PathName);        
        if (bSurf == 0)
            break;
        else
            %get normal vector
            invoke(mn, 'processcommand', ...
                ['Redim NormalF(2) : ' ...
                'call getDocument.getProblem(1).getFaceNormal(' ...
                '"' PathName '", NormalF) : ' ...
                'call setVariant(0, NormalF(0), "Matlab") : ' ... 
                'call setVariant(1, NormalF(1), "Matlab") : ' ... 
                'call setVariant(2, NormalF(2), "Matlab")' ]);
            Normal(1) = invoke (mn,  'getVariant', 0, 'Matlab');
            Normal(2) = invoke (mn,  'getVariant', 1, 'Matlab');
            Normal(3) = invoke (mn,  'getVariant', 2, 'Matlab');
            
            invoke(mn, 'processcommand', ...
                ['Redim NormalF(2) : ' ...
                'call getDocument.getProblem(1).getFaceOrigin(' ...
                '"' PathName '", NormalF) : ' ...
                'call setVariant(0, NormalF(0), "Matlab") : ' ... 
                'call setVariant(1, NormalF(1), "Matlab") : ' ... 
                'call setVariant(2, NormalF(2), "Matlab")' ]);
            Origin(1) = invoke (mn,  'getVariant', 0, 'Matlab');
            Origin(2) = invoke (mn,  'getVariant', 1, 'Matlab');
            Origin(3) = invoke (mn,  'getVariant', 2, 'Matlab');
            
            invoke(mn, 'processcommand', ...
                ['call getDocument.getProblem(1).getVertexGlobalPosition("' ...
                    PathName ',Edge#1,Vertex#1",xx,yy,zz) : ' ...
                'call setVariant(0,xx, "Matlab") : ' ... 
                'call setVariant(1,yy, "Matlab") : ' ... 
                'call setVariant(2,zz, "Matlab")' ]);
            Vertex1(1) = invoke (mn,  'getVariant', 0, 'Matlab');
            Vertex1(2) = invoke (mn,  'getVariant', 1, 'Matlab');
            Vertex1(3) = invoke (mn,  'getVariant', 2, 'Matlab');
            
            invoke(mn, 'processcommand', ...
                ['call getDocument.getProblem(1).getVertexGlobalPosition("' ...
                    PathName ',Edge#1,Vertex#2",xx,yy,zz) : ' ...
                'call setVariant(0,xx, "Matlab") : ' ... 
                'call setVariant(1,yy, "Matlab") : ' ... 
                'call setVariant(2,zz, "Matlab")' ]);
            Vertex2(1) = invoke (mn,  'getVariant', 0, 'Matlab');
            Vertex2(2) = invoke (mn,  'getVariant', 1, 'Matlab');
            Vertex2(3) = invoke (mn,  'getVariant', 2, 'Matlab');       
            
            invoke(mn, 'processcommand', ...
                ['call getDocument.getProblem(1).getVertexGlobalPosition("' ...
                    PathName ',Edge#2,Vertex#1",xx,yy,zz) : ' ...
                'call setVariant(0,xx, "Matlab") : ' ... 
                'call setVariant(1,yy, "Matlab") : ' ... 
                'call setVariant(2,zz, "Matlab")' ]);
            Vertex3(1) = invoke (mn,  'getVariant', 0, 'Matlab');
            Vertex3(2) = invoke (mn,  'getVariant', 1, 'Matlab');
            Vertex3(3) = invoke (mn,  'getVariant', 2, 'Matlab');  
            
            invoke(mn, 'processcommand', ...
                ['call getDocument.getProblem(1).getVertexGlobalPosition("' ...
                    PathName ',Edge#2,Vertex#2",xx,yy,zz) : ' ...
                'call setVariant(0,xx, "Matlab") : ' ... 
                'call setVariant(1,yy, "Matlab") : ' ... 
                'call setVariant(2,zz, "Matlab")' ]);
            Vertex4(1) = invoke (mn,  'getVariant', 0, 'Matlab');
            Vertex4(2) = invoke (mn,  'getVariant', 1, 'Matlab');
            Vertex4(3) = invoke (mn,  'getVariant', 2, 'Matlab');  
            
            %is it radial?
            if (Normal(3) == 0 && Normal(2) ~= 0 && Normal(1) ~= 0)
                %it is, now is the radius okay?
                oRad1 = sqrt(Vertex1(1)^2 + Vertex1(2)^2); %sqrt(Origin(1)^2 + Origin(2)^2);
                oRad2 = sqrt(Vertex2(1)^2 + Vertex2(2)^2); %sqrt(Origin(1)^2 + Origin(2)^2);
                oRad3 = sqrt(Vertex3(1)^2 + Vertex3(2)^2); %sqrt(Origin(1)^2 + Origin(2)^2);
                oRad4 = sqrt(Vertex4(1)^2 + Vertex4(2)^2); %sqrt(Origin(1)^2 + Origin(2)^2);
                
                if (minRad < oRad1) && (oRad1 < maxRad) && ...
                        (minRad < oRad2) && (oRad2 < maxRad) && ...
                        (minRad < oRad3) && (oRad3 < maxRad) && ...
                        (minRad < oRad4) && (oRad4 < maxRad)
                    %we are good, save the name:
                    radialNames = [radialNames {PathName}];
                end
            end
        end                    
    end
end

